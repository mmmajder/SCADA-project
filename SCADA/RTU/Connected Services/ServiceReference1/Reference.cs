//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTU.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRTUService")]
    public interface IRTUService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/Init", ReplyAction="http://tempuri.org/IRTUService/InitResponse")]
        int Init(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/Init", ReplyAction="http://tempuri.org/IRTUService/InitResponse")]
        System.Threading.Tasks.Task<int> InitAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/SendValue", ReplyAction="http://tempuri.org/IRTUService/SendValueResponse")]
        bool SendValue(byte[] signature, int id, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/SendValue", ReplyAction="http://tempuri.org/IRTUService/SendValueResponse")]
        System.Threading.Tasks.Task<bool> SendValueAsync(byte[] signature, int id, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/Get", ReplyAction="http://tempuri.org/IRTUService/GetResponse")]
        string Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUService/Get", ReplyAction="http://tempuri.org/IRTUService/GetResponse")]
        System.Threading.Tasks.Task<string> GetAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRTUServiceChannel : RTU.ServiceReference1.IRTUService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RTUServiceClient : System.ServiceModel.ClientBase<RTU.ServiceReference1.IRTUService>, RTU.ServiceReference1.IRTUService {
        
        public RTUServiceClient() {
        }
        
        public RTUServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RTUServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTUServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTUServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Init(string address) {
            return base.Channel.Init(address);
        }
        
        public System.Threading.Tasks.Task<int> InitAsync(string address) {
            return base.Channel.InitAsync(address);
        }
        
        public bool SendValue(byte[] signature, int id, double value) {
            return base.Channel.SendValue(signature, id, value);
        }
        
        public System.Threading.Tasks.Task<bool> SendValueAsync(byte[] signature, int id, double value) {
            return base.Channel.SendValueAsync(signature, id, value);
        }
        
        public string Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<string> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
    }
}
